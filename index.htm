<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">

    <title>WikiCarrera</title>

    <style>
        html, body {
            height: 100%;
            overflow: auto;
            margin: 0;
        }

        #wiki {
            width: 100%;
            height: 100%;
        }

        iframe {
            border: 0;
        }

        .breadcrumb-item+.breadcrumb-item::before {
            content: '»';
        }

        .fullscreen {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 999;

            background-color: rgba(0, 0, 0, 0.8);
            opacity: 1;
            transition: opacity 0.5s;
        }
        .fullscreen.hide {
            opacity: 0;
            pointer-events: none;
        }

        .lds-ripple {
            display: inline-block;
            position: relative;
            width: 80px;
            height: 80px;
        }
        .lds-ripple div {
            position: absolute;
            border: 4px solid #fff;
            opacity: 1;
            border-radius: 50%;
            animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;
        }
        .lds-ripple div:nth-child(2) {
            animation-delay: -0.5s;
        }
        @keyframes lds-ripple {
            0% {
                top: 36px;
                left: 36px;
                width: 0;
                height: 0;
                opacity: 1;
            }
            100% {
                top: 0;
                left: 0;
                width: 72px;
                height: 72px;
                opacity: 0;
            }
        }
    </style>
</head>
<body class="d-flex">

<div id="loading" class="fullscreen d-flex align-items-center justify-content-center">
    <div class="lds-ripple"><div></div><div></div></div>
</div>
<div class="d-flex flex-grow-1 flex-column">
    <div class="d-flex flex-row align-items-center p-2 border-bottom bg-light">
        <div class="p-3 border-right text-center text-nowrap">
            Inicio
            <div id="startArticleName" class="font-weight-bold">-</div>
        </div>
        <div class="p-3 border-right text-center text-nowrap">
            Pasos
            <div id="articleCount" class="font-weight-bold">0</div>
        </div>
        <div class="flex-grow-1">
            <ol class="breadcrumb my-0 p-3 bg-transparent" id="breadcrumb">
                <!-- DYNAMIC -->
            </ol>
        </div>
        <div class="p-3 border-left text-center text-nowrap">
            Destino
            <div id="endArticleName" class="font-weight-bold">-</div>
        </div>
    </div>
    <div class="flex-grow-1 position-relative">
        <div id="winner" class="fullscreen d-flex align-items-center justify-content-center hide">
            <h1 class="display-1 text-white">¡Ganador!</h1>
        </div>
        <iframe id="wiki"></iframe>
    </div>
</div>


<!-- Optional JavaScript -->
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
<script>
  const lang = 'es';

  const iframe = document.querySelector('#wiki');
  let endArticle;
  let breadcrumb = [];

  const loadingElem = document.querySelector('#loading')
  const startLoading = () => loadingElem.classList.remove('hide');
  const endLoading = () => loadingElem.classList.add('hide');

  const getArticle = (title) => {
    startLoading();
    return fetch(`https://${lang}.wikipedia.org/api/rest_v1/page/html/${title}`)
      .then(response => {
        endLoading();

        if (response.status === 404) {
          throw new Error('404 Not Found');
        }

        return response.text();
      })
      .then(content => {
        let parsedContent = content;
        parsedContent = parsedContent.replace('<base href', '<base nohref');
        parsedContent = parsedContent.replace('/w/load.php', `https://${lang}.wikipedia.org/w/load.php`);

        return {
          pageId: content.match('<meta property="mw:pageId" content="(\\d*)"\/>')[1],
          title: decodeURIComponent(content.match('<link rel="dc:isVersionOf" href="\/\/\\w*\.wikipedia.org\/wiki\/([^"]*)"/>')[1]),
          content: parsedContent,
        };
      });
  };
  const navigateArticle = (title) => {
    console.info('Navigating', title);
    getArticle(title).then(article => {
      refreshBreadcrumb(article);

      iframe.contentWindow.document.close();
      iframe.contentWindow.document.write(article.content);
      iframe.contentWindow.document.body.style = 'padding: 25px';
      iframe.contentWindow.document.addEventListener('contextmenu', (event) => {
        event.preventDefault();
      });
      iframe.contentWindow.document.addEventListener('auxclick', (event) => {
        event.preventDefault();
      });
      iframe.contentWindow.document.addEventListener('click', (event) => {
        if (event.target.tagName === 'A') {
          event.preventDefault();

          const href = event.target.getAttribute('href');

          const isRef = href.startsWith(`./${article.title}`) && href.includes('#');
          if (isRef) {
            iframe.contentWindow.document.location.href = href.substring(href.indexOf('#'));
            return;
          }

          if (href.substring(0, 2) === './') {
            navigateArticle(href.substring(2));
          }
        }
      });

      checkWinner(article);
    });
  };

  const cleanName = title => title.replace(/_/g, ' ');

  const refreshBreadcrumb = (newArticle) => {
    if (newArticle) {
      breadcrumb.push(newArticle);
    }

    const elemBreadcrumb = document.querySelector('#breadcrumb');

    elemBreadcrumb.innerHTML = '';
    breadcrumb.slice(1).forEach((article) => {
      let name = cleanName(article.title);
      elemBreadcrumb.insertAdjacentHTML('beforeend', `<li class="breadcrumb-item">${name}</li>`);
    });

    document.querySelector('#articleCount').innerHTML = breadcrumb.length - 1;
  };

  const checkWinner = (article) => {
    if (article.title === endArticle) {
      document.querySelector('#winner').classList.remove('hide');
    }
  };

  const getRandomTitle = () => {
    return fetch(`https://${lang}.wikipedia.org/api/rest_v1/page/random/title`)
      .then(response => response.json())
      .then(({ items }) => {
        return items[0].title;
      });
  };

  const startGame = (start, end) => {
    navigateArticle(start);

    endArticle = end;
    document.querySelector('#endArticleName').innerHTML = cleanName(end);
    document.querySelector('#startArticleName').innerHTML = cleanName(start);
  };

  document.addEventListener('DOMContentLoaded', () => {
    const params = new URLSearchParams(location.search);
    if (params.has('start') && params.has('end')) {
      startGame(params.get('start'), params.get('end'));
      return;
    }

    Promise.all([
      getRandomTitle(),
      getRandomTitle(),
    ]).then(([start, end]) => {
      if (start === end) {
        location.reload();
        return;
      }

      startGame(start, end);
    });
  });

  window.addEventListener('beforeunload', (event) => {
    const confirmationMessage = 'Si te vas perdés todo.';

    event.preventDefault();
    event.returnValue = confirmationMessage;
    return confirmationMessage;
  });
</script>
</body>
</html>
